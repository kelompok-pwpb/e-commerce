// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Token{
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId],references: [id])
    userId Int 
    jti String @db.VarChar(255) 
    token String @db.VarChar(255) @unique
}
model User {
  id Int @id @default(autoincrement())
  email String @db.VarChar(255) @unique
  name String @db.VarChar(55)
  password String @db.Char(72)
  phone String? @db.VarChar (15)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  cart Cart[]
  review Review[]
  order Order[]
  token Token[]

  @@map("users")
}

model Cart {
    id Int @id @default(autoincrement())
    product Product @relation(fields: [productId],references: [id],onDelete: Cascade ) 
    productId Int
    user User @relation(fields: [userId],references: [id],onDelete: Cascade)
    userId Int  
    count Int
}

model ProductCategory {
    id Int @id @default(autoincrement())
    product Product[]
    name String @db.VarChar(100) @unique
}


model ProductInformation {
    id Int @id @default(autoincrement())
    product Product @relation(fields: [productId],references: [id],onDelete: Cascade ) 
    productId Int @unique
    description String @db.Text
    name String @db.VarChar(100) 
    price Decimal @db.Decimal(10,2) 
    img String @db.VarChar(255)
    stock Int

}

model Product {
    id Int @id @default(autoincrement()) 
    productCategory String? 
    category ProductCategory? @relation(fields: [productCategory],references: [name],onDelete: SetNull ) 
    productInformation ProductInformation?
    available Boolean
    review Review[]
    cart Cart[] 
    Order Order[]
}

model Review {
    id Int @id @default(autoincrement()) 
    user User @relation(fields: [userId],references: [id])
    product Product @relation(fields: [productId],references: [id],onDelete: Cascade) 
    productId Int
    userId Int
    text String @db.Text
    rating Decimal @db.Decimal(10,2) 
}

model Expedition {
    id Int @id @default(autoincrement())
    name String  
    Order Order[]
}

model Order{
    id Int @id @default(autoincrement()) 
    user User? @relation(fields: [userId],references: [id],onDelete: SetNull)
    userId Int?
    count Int
    product Product? @relation(fields: [productId],references: [id],onDelete: SetNull)
    productId Int? 
    expedition Expedition @relation(fields: [expeditionId],references: [id])
    expeditionId Int
    arrival DateTime @db.Timestamp()
}